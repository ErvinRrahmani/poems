{"ast":null,"code":"var _jsxFileName = \"/home/erwin/Desktop/Sweden-task/my-app/src/components/Listing/Listing.js\",\n    _s = $RefreshSig$();\n\nimport './Listing.scss';\nimport { useState } from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport { useRecoilState } from \"recoil\";\nimport { darkModeState } from \"../../shared/GlobalState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BUTTON_WRAPPER_STYLES = {\n  position: 'relative',\n  zIndex: 1\n};\n\nfunction CharacterCounter() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CharacterCount, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n\n_c = CharacterCounter;\nexport default function Listing(_ref) {\n  _s();\n\n  let {\n    poems\n  } = _ref;\n  console.log('incoming poems', poems);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedPoem, setSelectedPoem] = useState(null);\n  const [singlePoem, setSinglePoem] = useState(''); // const [isDarkModeEnabled, setIsDarkModeEnabled] = useRecoilState(darkModeState);\n  // console.log('atom shit',isDarkModeEnabled)\n\n  let poemData = {};\n\n  function setTitle(title) {\n    console.log('single poem', title);\n    setSinglePoem(title);\n  }\n\n  console.log('single poem', poemData);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-borderless\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Poems\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"col\",\n            children: \"Poem Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: poems === null || poems === void 0 ? void 0 : poems.map((poem, i) => {\n            var _poem$lines;\n\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"row\",\n                children: i + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: poem === null || poem === void 0 ? void 0 : poem.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: poem === null || poem === void 0 ? void 0 : poem.author\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [poem === null || poem === void 0 ? void 0 : (_poem$lines = poem.lines) === null || _poem$lines === void 0 ? void 0 : _poem$lines.slice(0, 5), \" -...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: BUTTON_WRAPPER_STYLES,\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    setIsOpen(true);\n                    setSinglePoem(poem);\n                  },\n                  children: \"Open Modal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Modal, {\n                  poemSingleData: singlePoem,\n                  open: isOpen,\n                  onClose: () => setIsOpen(false)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 29\n              }, this)]\n            }, poem.lines.toString().length, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Listing, \"LACfYxduZKwabjLeDuNAaL3OxIg=\");\n\n_c2 = Listing;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CharacterCounter\");\n$RefreshReg$(_c2, \"Listing\");","map":{"version":3,"sources":["/home/erwin/Desktop/Sweden-task/my-app/src/components/Listing/Listing.js"],"names":["useState","Modal","useRecoilState","darkModeState","BUTTON_WRAPPER_STYLES","position","zIndex","CharacterCounter","Listing","poems","console","log","isOpen","setIsOpen","selectedPoem","setSelectedPoem","singlePoem","setSinglePoem","poemData","setTitle","title","map","poem","i","author","lines","slice","toString","length"],"mappings":"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","sourcesContent":["import './Listing.scss'\nimport {useState} from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport {useRecoilState} from \"recoil\";\nimport {darkModeState} from \"../../shared/GlobalState\";\n\n\nconst BUTTON_WRAPPER_STYLES = {\n    position: 'relative',\n    zIndex: 1\n}\n\nfunction CharacterCounter() {\n    return (\n        <div>\n            <TextInput />\n            <CharacterCount />\n        </div>\n    );\n}\n\nexport default function Listing({poems}) {\n\n    console.log('incoming poems', poems)\n    const [isOpen, setIsOpen] = useState(false);\n    const [selectedPoem, setSelectedPoem] = useState(null);\n    const [singlePoem, setSinglePoem] = useState('')\n    // const [isDarkModeEnabled, setIsDarkModeEnabled] = useRecoilState(darkModeState);\n\n\n    // console.log('atom shit',isDarkModeEnabled)\n\n    let poemData = {}\n\n    function setTitle(title) {\n        console.log('single poem', title)\n        setSinglePoem(title)\n    }\n\n\n    console.log('single poem', poemData)\n\n\n    return (<>\n        <table className=\"table table-borderless\">\n            <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Author</th>\n                <th scope=\"col\">Poems</th>\n                <th scope=\"col\">Poem Details</th>\n            </tr>\n            </thead>\n            <tbody>\n            <>\n                {poems?.map((poem, i) => {\n                    return (\n\n                        <tr key={poem.lines.toString().length}>\n                            <th scope=\"row\">{i + 1}</th>\n                            <td>{poem?.title}</td>\n                            <td>{poem?.author}</td>\n                            <td>{poem?.lines?.slice(0, 5)} -...</td>\n                            <div style={BUTTON_WRAPPER_STYLES}>\n                                <button onClick={() => {\n                                    setIsOpen(true);\n                                    setSinglePoem(poem)\n                                }}>Open Modal\n                                </button>\n                                <Modal poemSingleData={singlePoem} open={isOpen} onClose={() => setIsOpen(false)}>\n\n                                </Modal>\n                            </div>\n                        </tr>\n\n                    )\n                })}\n            </>\n            </tbody>\n        </table>\n\n    </>)\n}"]},"metadata":{},"sourceType":"module"}